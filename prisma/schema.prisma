generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                String    @id @default(cuid())
  spotifyUserUri    String    @unique @map("spotify_user_uri")
  username          String    @unique
  profilePictureUrl String    @map("profile_picture_url")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  comments           Comment[]
  recentLikes       Song[]    @relation("Likes")
  currentSongUri    String?    @map("current_song_uri")
  nowPlaying        Song?      @relation(name: "NowPlaying", fields: [currentSongUri], references: [spotifySongUri])
  latitude          String?
  longitude         String? 
  likes             Like[]

  @@map("users")
}

model Song {
  id             String    @id @default(cuid())
  name           String
  artist        String
  album         String?
  spotifySongUri String    @unique @map("spotify_song_uri")
  comments       Comment[]
  likedBy        User[]    @relation("Likes")
  playedBy       User[]    @relation("NowPlaying")

  @@map("songs")
}

model Comment {
  id           String   @id @default(cuid())
  content      String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  songUri      String
  song         Song     @relation(fields: [songUri], references: [spotifySongUri], onDelete: Cascade)
  authorUri    String
  author       User     @relation(fields: [authorUri], references: [spotifyUserUri], onDelete: Cascade)
  parentId     String?
  parent       Comment?  @relation(name: "ParentChild",fields: [parentId], references: [id], onDelete: Cascade)
  chilren      Comment[] @relation(name: "ParentChild")
  likes        Like[]

  @@map("comments")
}

model Like {
  user         User  @relation(fields: [userUri], references: [spotifyUserUri], onDelete: Cascade)
  userUri      String
  comment      Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId  String
  @@id([userUri, commentId])
} 