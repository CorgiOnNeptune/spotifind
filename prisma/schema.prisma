generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id                String    @id @default(cuid())
  spotifyUserUri    String    @unique @map("spotify_user_uri")
  username          String    @unique
  profilePictureUrl String    @map("profile_picture_url")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  currentSongUri    String?   @map("current_song_uri")
  latitude          String?
  longitude         String?
  Like              Like[]
  comments          Comment[]
  nowPlaying        Song?     @relation("NowPlaying", fields: [currentSongUri], references: [spotifySongUri])
  recentLikes       Song[]    @relation("Likes")

  @@map("users")
}

model Song {
  id             String    @id @default(cuid())
  name           String
  spotifySongUri String    @unique @map("spotify_song_uri")
  artist         String
  album          String?
  comments       Comment[]
  playedBy       User[]    @relation("NowPlaying")
  likedBy        User[]    @relation("Likes")

  @@map("songs")
}

model Comment {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now()) @map("created_at")
  authorUri      String
  content        String
  parentId       String?
  songUri        String
  updated_at     DateTime  @default(now())
  Like           Like[]
  users          User      @relation(fields: [authorUri], references: [spotifyUserUri], onDelete: Cascade)
  comments       Comment?  @relation("commentsTocomments", fields: [parentId], references: [id], onDelete: Cascade)
  other_comments Comment[] @relation("commentsTocomments")
  songs          Song      @relation(fields: [songUri], references: [spotifySongUri], onDelete: Cascade)

  @@map("comments")
}

model Like {
  userUri   String
  commentId String
  comments  Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  users     User    @relation(fields: [userUri], references: [spotifyUserUri], onDelete: Cascade)

  @@id([userUri, commentId])
}
